# This version of the core edit files axiomatizes types
#

skip module Unify
skip module TcType
skip module RepType
skip module ForeignCall
skip module PprCore
skip module Data.ByteString
skip module ErrUtils
skip module CostCentre
skip module Platform

####################################################
### DVarSet => VarSet,  DVarEnv => VarEnv
##
## We do this translation by implementing DVarSets using
## the same implementation as VarSets. (Both are definitions
## in Coq.)

rename type UniqDSet.UniqDSet = UniqSet.UniqSet
rename value UniqDSet.unitUniqDSet = UniqSet.unitUniqSet
rename value UniqDSet.unionManyUniqDSets = UniqSet.unionManyUniqSets 
rename value UniqDSet.unionUniqDSets = UniqSet.unionUniqSets
rename value UniqDSet.sizeUniqDSet = UniqSet.sizeUniqSet
rename value UniqDSet.partitionUniqDSet = UniqSet.partitionUniqSet
rename value UniqDSet.mkUniqDSet = UniqSet.mkUniqSet
rename value UniqDSet.minusUniqDSet = UniqSet.minusUniqSet
rename value UniqDSet.isEmptyUniqDSet = UniqSet.isEmptyUniqSet
rename value UniqDSet.intersectUniqDSets = UniqSet.intersectUniqSets
rename value UniqDSet.foldUniqDSet = UniqSet.nonDetFoldUniqSet
rename value UniqDSet.filterUniqDSet = UniqSet.filterUniqSet
rename value UniqDSet.addOneToUniqDSet = UniqSet.addOneToUniqSet
rename value UniqDSet.addListToUniqDSet = UniqSet.addListToUniqSet
rename value UniqDSet.emptyUniqDSet = UniqSet.emptyUniqSet
rename value UniqDSet.delOneFromUniqDSet = UniqSet.delOneFromUniqSet
rename value UniqDSet.delListFromUniqDSet = UniqSet.delListFromUniqSet
rename value UniqDSet.elementOfUniqDSet = UniqSet.elementOfUniqSet
rename value UniqDSet.uniqDSetMinusUniqSet = UniqSet.minusUniqSet
rename value UniqDSet.uniqDSetIntersectUniqSet = UniqSet.intersectUniqSets
rename value UniqDSet.uniqDSetToList = UniqSet.nonDetEltsUniqSet
rename value UniqDSet.foldDVarSet = Core.nonDetFoldUniqSet

redefine Definition Core.disjointDVarSet := Core.disjointVarSet.
redefine Definition Core.anyDVarSet      := Core.anyVarSet.
redefine Definition Core.allDVarSet      := Core.allVarSet.

redefine Definition Core.dVarSetToVarSet : DVarSet -> VarSet := fun x => x.
redefine Definition FV.fvDVarSet : FV.FV -> Core.DVarSet := FV.fvVarSet.

rename type UniqDFM.UniqDFM = UniqFM.UniqFM
rename value UniqDFM.unitUDFM = UniqFM.unitUFM
rename value UniqDFM.addListToUDFM = UniqFM.addListToUFM
rename value UniqDFM.addToUDFM = UniqFM.addToUFM 
rename value UniqDFM.addToUDFM_C = UniqFM.addToUFM_C 
rename value UniqDFM.allUDFM = UniqFM.allUFM 
rename value UniqDFM.alterUDFM = UniqFM.alterUFM
rename value UniqDFM.anyUDFM  = UniqFM.anyUFM 
rename value UniqDFM.delFromUDFM = UniqFM.delFromUFM 
rename value UniqDFM.delListFromUDFM = UniqFM.delListFromUFM 
rename value UniqDFM.disjointUDFM = UniqFM.disjointUFM
rename value UniqDFM.elemUDFM = UniqFM.elemUFM 
rename value UniqDFM.eltsUDFM = UniqFM.eltsUFM 
rename value UniqDFM.emptyUDFM = UniqFM.emptyUFM 
rename value UniqDFM.filterUDFM = UniqFM.filterUFM
rename value UniqDFM.foldUDFM  = UniqFM.nonDetFoldUFM 
rename value UniqDFM.isNullUDFM = UniqFM.isNullUFM 
rename value UniqDFM.listToUDFM  = UniqFM.listToUFM 
rename value UniqDFM.lookupUDFM = UniqFM.lookupUFM
rename value UniqDFM.mapUDFM = UniqFM.mapUFM 
rename value UniqDFM.minusUDFM  = UniqFM.minusUFM 
rename value UniqDFM.partitionUDFM = UniqFM.partitionUFM 
rename value UniqDFM.plusUDFM = UniqFM.plusUFM
rename value UniqDFM.plusUDFM_C = UniqFM.plusUFM_C 
rewrite forall x, UniqDFM.udfmToUfm x = x
rename value UniqDFM.unitUFM = UniqDFM.unitUFM

####################################################
## Most of the time, we are counting 

rename type GHC.Num.Int = nat

rewrite forall, Data.Foldable.length       = Coq.Lists.List.length
rewrite forall x y, GHC.List.replicate x y = Coq.Lists.List.repeat y x
rewrite forall x, GHC.List.take x          = Coq.Lists.List.firstn x
rewrite forall x, GHC.List.drop x          = Coq.Lists.List.skipn x


####################################################
## Glueing together the Core
####################################################

#
# This must stay in sync with the Makefile
#
rename module Var     Core
rename module IdInfo  Core
rename module VarSet  Core
rename module VarEnv  Core
rename module CoreSyn Core

rename module Class   Core
axiomatize original module name Class
rename module TyCon   Core
axiomatize original module name TyCon
rename module DataCon Core
axiomatize original module name DataCon
rename module PatSyn  Core
axiomatize original module name PatSyn
rename module Demand  Core
axiomatize original module name Demand
rename module Type    Core
axiomatize original module name Type
rename module TyCoRep Core
axiomatize original module name TyCoRep
rename module Coercion Core
axiomatize original module name Coercion

#
# Punned constructor values (in Core)
#
rename value DataCon.HsSrcBang  = Core.Mk_HsSrcBang
rename value DataCon.EqSpec     = Core.Mk_EqSpec
rename value Class.Class        = Core.Mk_Class
rename value Var.Id             = Core.Mk_Id
# rename value Var.TyVar          = Core.Mk_TyVar
# rename value Var.TcTyVar        = Core.Mk_TcTyVar
rename value IdInfo.IdInfo      = Core.Mk_IdInfo
rename value IdInfo.DFunId      = Core.Mk_DFunId
rename value IdInfo.JoinId      = Core.Mk_JoinId
rename value CoreSyn.Var        = Core.Mk_Var
rename value CoreSyn.IsOrphan   = Core.Mk_IsOrphan
rename value CoreSyn.RuleEnv    = Core.Mk_RuleEnv
rename value Demand.ExnStr      = Core.Mk_ExnStr
rename value Demand.Str         = Core.Mk_Str
rename value Demand.Use         = Core.Mk_Use
rename value Demand.DmdType     = Core.Mk_DmdType
rename value Demand.StrictSig   = Core.Mk_StrictSig
rename value Demand.KillFlags   = Core.Mk_KillFlags

rename value TyCoRep.TCvSubst   = Core.Mk_TCvSubst
rename value CoreSyn.Type_      = Core.Mk_Type
rename value CoreSyn.Coercion   = Core.Mk_Coercion

## Other punning

rename value CoreFVs.FVAnn    = CoreFVs.Mk_FVAnn
rename value CoreSubst.Subst  = CoreSubst.Mk_Subst

###############################################################################
#  General edits related to translating Core
###############################################################################

## Outputtable
rewrite forall x, Core.pprIdDetails x = Panic.someSDoc

rename type GHC.Stack.Types.HasCallStack = Util.HasDebugCallStack

###############################################################################
#  Pruning the AST, general
###############################################################################

#
# we never use any operations on these types, so perfectly sound to forget
# they exist. Could also axiomatize, but then would need to add Default/Eq
# instances for them too.
#

rename type PrimOp.PrimOp           = AxiomatizedTypes.PrimOp
rename type ForeignCall.ForeignCall = AxiomatizedTypes.ForeignCall
rename type ForeignCall.CType       = AxiomatizedTypes.CType
rename type CostCentre.CostCentre   = AxiomatizedTypes.CostCentre

# used in DataCon
rename type MkId.DataConBoxer       = AxiomatizedTypes.DataConBoxer



###############################################################################
# Skipping constructors 
###############################################################################

#
# data Unfolding
#  = NoUnfolding        -- ^ We have no information about the unfolding.
#
skip constructor Core.BootUnfolding
skip constructor Core.OtherCon
skip constructor Core.DFunUnfolding
skip constructor Core.CoreUnfolding

#
# eliminating parts of the 'Expr' and 'AnnExpr' type
#
skip constructor Core.Tick

skip constructor Core.AnnTick
#
# eliminating TcTy variables and Type variables from 'Var'
#
skip constructor Core.TcTyVar
skip constructor Core.TyVar

# eliminating coercion variables from 'IdDetails' 
# (there are other unimportant IdDetails, but this one controls
# the operations 'isCoVar` and `isNonCoVarId`)

skip constructor Core.CoVarId

###############################################################################
# axiomatize type & coercion information
#  - define types in a new (manual) module called AxiomatizedTypes
#      it helps to be able to refer to these types *before* Core is defined
#  - rewrite refererences to these types to new module
###############################################################################


#
# axiomatized types
#
rename type TyCoRep.Coercion      = AxiomatizedTypes.Coercion
rename type TyCoRep.Type_         = AxiomatizedTypes.Type_
rename type TyCoRep.ThetaType     = AxiomatizedTypes.ThetaType
rename type TyCoRep.TyBinder      = AxiomatizedTypes.TyBinder
rename type TyCoRep.TyThing       = AxiomatizedTypes.TyThing
rename type TyCoRep.Kind          = AxiomatizedTypes.Kind
rename type TyCoRep.PredType      = AxiomatizedTypes.PredType

rename type CoAxiom.CoAxiom            = AxiomatizedTypes.CoAxiom
rename type CoAxiom.Branched           = AxiomatizedTypes.Branched
rename type CoAxiom.Unbranched         = AxiomatizedTypes.Unbranched
rename type CoAxiom.BuiltInSynFamily   = AxiomatizedTypes.BuiltInSynFamily
rename type CoAxiom.Role               = AxiomatizedTypes.Role
rename type CoAxiom.BranchIndex        = AxiomatizedTypes.BranchIndex
rename type CoAxiom.CoAxiomRule        = AxiomatizedTypes.CoAxiomRule
rename type CoAxiom.CoAxBranch         = AxiomatizedTypes.CoAxBranch
rename value CoAxiom.Representational  = AxiomatizedTypes.Representational
rename value CoAxiom.Nominal           = AxiomatizedTypes.Nominal
rename value CoAxiom.Phantom           = AxiomatizedTypes.Phantom


#
# not translating TcType or TysWiredIn yet
#
# these can be added as Axioms to Core, but
# for some reason, adding these as Axioms double adds them.

# add Core Axiom Core.TcTyVarDetails : Type.
rename type TcType.TcTyVarDetails = AxiomatizedTypes.TcTyVarDetails

# add Core Axiom Core.liftedTypeKind : AxiomatizedTypes.Kind.
rename value TysWiredIn.liftedTypeKind = AxiomatizedTypes.liftedTypeKind

# add Core Axiom Core.constraintKind : AxiomatizedTypes.Kind.
rename value TysWiredIn.constraintKind = AxiomatizedTypes.constraintKind


###############################################################################
# rewrites for type/corecion related operations defined in skipped modules
##############################################################################

# DataCon
# This relies on Unify.typesCantMatch as well as several operations from Type
axiomatize definition Core.dataConCannotMatch

############################################################################
# rewrites for type/corecion related operations defined in translated modules
############################################################################


#
# (these operations were in TyCoRep)
#
rewrite forall co,     Core.tyCoFVsOfCo co          = FV.emptyFV
rewrite forall ty,     Core.tyCoFVsOfType ty        = FV.emptyFV
rewrite forall ty,     Core.tyCoVarsOfTypeDSet ty   = Core.emptyDVarSet
rewrite forall co,     Core.tyCoVarsOfCoDSet co     = Core.emptyDVarSet

# in CoreSubst.substBndr rewrite forall bndr, Core.isTyVar bndr = false 
# in CoreSubst.substBndr rewrite forall bndr, Core.isCoVar bndr = false
# in CoreSubst.extendSubstWithVar rewrite forall bndr, Core.isTyVar bndr = false 
# in CoreSubst.extendSubstWithVar rewrite forall bndr, Core.isCoVar bndr = false

in CoreSubst.substBndr   rewrite forall x, Core.noFreeVarsOfType x = true
in CoreSubst.substIdBndr rewrite forall x, Core.noFreeVarsOfType x = true



#
# we cannot verify these assertions as we aren't tracking whether types are
# coercion types are not. But they are debug assertions!
#
in Id.mkSysLocal rewrite forall ty, (Core.isCoercionType ty) = false
in Id.mkUserLocal rewrite forall ty, (Core.isCoercionType ty) = false

# these two use the type information to determine whether to make a type
# or a coercion variable
#
in Id.mkLocalIdOrCoVarWithInfo rewrite forall ty, (Core.isCoercionType ty) = false
in Id.mkLocalIdOrCoVar rewrite forall ty, Core.isCoercionType ty = false

#
# We need to avoid creating new Coercions and Types
#
# in Core.varToCoreExpr rewrite forall v, Core.isCoVar v = false
# in Core.varToCoreExpr rewrite forall v, Core.isTyVar v = false
# in Core.varToCoreExpr rewrite forall bndr, Core.isId v = true

############################################################################
# pruning ticks
############################################################################

in CoreFVs.expr_fvs rewrite forall t, CoreFVs.tickish_fvs t = FV.emptyFV

# remove reasoning about ticks
#
rewrite forall xs e, CoreUtils.stripTicksE xs e = e
rewrite forall xs e, CoreUtils.stripTicksT xs e = e
rewrite forall ts e, CoreUtils.mkTicks ts e = e

############################################################################
# pruning Rules
############################################################################


# Redefine RuleInfo so that it is always empty. This is *safe*
# these redefines are for definitions in IdInfo
redefine Inductive  Core.RuleInfo : Type := Core.EmptyRuleInfo.
redefine Definition Core.emptyRuleInfo   := Core.EmptyRuleInfo.
redefine Definition Core.isEmptyRuleInfo  : Core.RuleInfo -> bool
   := fun x => true.
redefine Definition Core.ruleInfoFreeVars : Core.RuleInfo -> Core.DVarSet
   := fun x => Core.emptyDVarSet.
redefine Definition Core.ruleInfoRules    : Core.RuleInfo -> list Core.CoreRule 
   := fun x => nil.
redefine Definition Core.setRuleInfoHead  : Name.Name -> (Core.RuleInfo -> Core.RuleInfo)
   := fun x y => Core.EmptyRuleInfo.


redefine Definition CoreFVs.idRuleFVs : Core.Id  -> FV.FV := fun id  => FV.emptyFV.
redefine Definition Id.idCoreRules    : Core.Id -> list (Core.CoreRule) 
   := fun x => nil.

